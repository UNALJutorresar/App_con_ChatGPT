# -*- coding: utf-8 -*-
"""apps.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14uS8HhY1nJykgarqC4gDQ9hIQpbGqoIT
"""

import streamlit as st
import pandas as pd
import datetime

# Título de la app
st.title("Registro de Finanzas Personales")

# Autor de la app
st.write("Esta app fue elaborada por Juan Camilo Torres Arboleda.")

# Crear una estructura de datos para almacenar la información
if "finanzas" not in st.session_state:
    st.session_state.finanzas = pd.DataFrame(
        columns=["Fecha", "Tipo", "Categoría", "Monto", "Descripción"]
    )


def agregar_transaccion():
    """Agrega una nueva transacción (ingreso o gasto) al registro.

    Permite al usuario introducir un tipo de transacción (ingreso o
    gasto), una categoría, un monto, una descripción y la fecha de la
    transacción. La transacción se almacena en el DataFrame de
    transacciones.

    """
    tipo = st.selectbox("Tipo de transacción", ["Ingreso", "Gasto"])
    categoria = st.text_input(
        "Categoría (Ej. Sueldo, Alimentación, Entretenimiento, etc.)"
    )
    monto = st.number_input("Monto", min_value=0.0, format="%.2f")
    descripcion = st.text_area("Descripción")
    fecha = st.date_input(
        "Fecha",
        min_value=datetime.date(2020, 1, 1),
        value=datetime.date.today(),
    )

    if st.button("Agregar Transacción"):
        if categoria and monto:
            # Agregar la transacción al DataFrame
            nueva_transaccion = pd.DataFrame(
                [[fecha, tipo, categoria, monto, descripcion]],
                columns=["Fecha", "Tipo", "Categoría", "Monto", "Descripción"],
            )
            st.session_state.finanzas = pd.concat(
                [st.session_state.finanzas, nueva_transaccion],
                ignore_index=True,
            )
            st.success("Transacción agregada con éxito")
        else:
            st.warning("Por favor ingresa todos los campos obligatorios")


def mostrar_reportes():
    """Muestra un reporte de las transacciones filtradas por fecha.

    Permite al usuario seleccionar un rango de fechas y genera un
    reporte de  ingresos, gastos y saldo neto. También compara los
    ingresos y gastos con los valores presupuestadosy muestra las
    diferencias.

    """
    # Convertir la columna 'Fecha' a tipo datetime
    st.session_state.finanzas["Fecha"] = pd.to_datetime(
        st.session_state.finanzas["Fecha"]
    )

    # Mostrar las transacciones
    st.write("### Registro de transacciones:")
    st.dataframe(st.session_state.finanzas)

    # Filtro de fecha (semana y mes)
    fecha_inicio = st.date_input(
        "Fecha de inicio",
        min_value=datetime.date(2020, 1, 1),
        value=datetime.date(2024, 1, 1),
    )
    fecha_fin = st.date_input(
        "Fecha de fin",
        min_value=datetime.date(2020, 1, 1),
        value=datetime.date.today(),
    )

    # Filtrar las transacciones según el rango de fechas
    transacciones_filtradas = st.session_state.finanzas[
        (st.session_state.finanzas["Fecha"] >= pd.to_datetime(fecha_inicio))
        & (st.session_state.finanzas["Fecha"] <= pd.to_datetime(fecha_fin))
    ]

    if not transacciones_filtradas.empty:
        # Calcular el total de ingresos y gastos
        total_ingresos = transacciones_filtradas[
            transacciones_filtradas["Tipo"] == "Ingreso"
        ]["Monto"].sum()
        total_gastos = transacciones_filtradas[
            transacciones_filtradas["Tipo"] == "Gasto"
        ]["Monto"].sum()

        # Mostrar resumen
        st.write(
            f"### Resumen de la fecha seleccionada ({fecha_inicio} a {fecha_fin}):"
        )
        st.write(f"**Total Ingresos**: {total_ingresos:.2f}")
        st.write(f"**Total Gastos**: {total_gastos:.2f}")
        st.write(f"**Saldo Neto**: {(total_ingresos - total_gastos):.2f}")

        # Mostrar diferencia con presupuesto
        presupuesto_ingresos = st.number_input(
            "Presupuesto de ingresos",
            min_value=0.0,
            value=total_ingresos,
            format="%.2f",
        )
        presupuesto_gastos = st.number_input(
            "Presupuesto de gastos",
            min_value=0.0,
            value=total_gastos,
            format="%.2f",
        )

        diferencia_ingresos = total_ingresos - presupuesto_ingresos
        diferencia_gastos = total_gastos - presupuesto_gastos

        st.write(
            f"**Diferencia de Ingresos respecto al presupuesto**: {diferencia_ingresos:.2f}"
        )
        st.write(
            f"**Diferencia de Gastos respecto al presupuesto**: {diferencia_gastos:.2f}"
        )

        # Mostrar gráficos
        st.write("### Gráfico de ingresos y gastos:")
        df_resumen = pd.DataFrame(
            {
                "Categoria": ["Ingresos", "Gastos"],
                "Monto": [total_ingresos, total_gastos],
            }
        )
        st.bar_chart(df_resumen.set_index("Categoria"))

    else:
        st.warning("No hay transacciones en este período.")


def establecer_metas_ahorro():
    """Establece y muestra el progreso hacia las metas de ahorro.

    Permite al usuario establecer una meta de ahorro, indicar su ahorro
    actual y ver el progreso hacia la meta en porcentaje.

    """
    meta_ahorro = st.number_input(
        "Monto total de ahorro deseado", min_value=0.0, format="%.2f"
    )
    fecha_meta = st.date_input(
        "Fecha límite para alcanzar la meta", min_value=datetime.date.today()
    )

    # Mostrar el progreso hacia la meta
    if meta_ahorro > 0:
        ahorro_actual = st.number_input(
            "Ahorro actual", min_value=0.0, format="%.2f"
        )
        progreso = (ahorro_actual / meta_ahorro) * 100

        st.write(f"### Progreso hacia la meta de ahorro:")
        st.write(f"**Meta de ahorro**: {meta_ahorro:.2f}")
        st.write(f"**Ahorro actual**: {ahorro_actual:.2f}")
        st.write(f"**Progreso**: {progreso:.2f}%")

        # Mostrar gráfico de progreso
        st.progress(int(progreso))


# Sección para agregar una transacción
st.sidebar.header("Agregar Transacción")
agregar_transaccion()

# Sección para ver los reportes
st.sidebar.header("Ver Reportes")
ver_reportes = st.sidebar.radio(
    "Selecciona el tipo de reporte:",
    ["Resumen Semanal/Mensual", "Metas de Ahorro"],
)

if ver_reportes == "Resumen Semanal/Mensual":
    mostrar_reportes()
else:
    establecer_metas_ahorro()