{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/UNALJutorresar/App_con_ChatGPT/blob/main/app_5.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fwxnkCZSI3xs"
      },
      "outputs": [],
      "source": [
        "import pygame\n",
        "import streamlit as st\n",
        "import numpy as np\n",
        "import io\n",
        "from PIL import Image\n",
        "\n",
        "# Inicialización de Pygame\n",
        "pygame.init()\n",
        "\n",
        "# Definir parámetros del pozo de pelotas\n",
        "WIDTH, HEIGHT = 600, 400\n",
        "FPS = 60\n",
        "\n",
        "# Propiedades de la pelota\n",
        "RADIUS = 20\n",
        "GRAVITY = 0.5\n",
        "FRICTION = 0.99\n",
        "\n",
        "# Definir la pantalla de Pygame\n",
        "screen = pygame.display.set_mode((WIDTH, HEIGHT))\n",
        "pygame.display.set_caption(\"Pozo de Pelotas\")\n",
        "\n",
        "# Clase para la pelota\n",
        "class Ball:\n",
        "    def __init__(self, x, y, color):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        self.radius = RADIUS\n",
        "        self.color = color\n",
        "        self.x_vel = 0\n",
        "        self.y_vel = 0\n",
        "\n",
        "    def move(self):\n",
        "        \"\"\"Actualizar la posición de la pelota considerando la gravedad y la fricción.\"\"\"\n",
        "        self.y_vel += GRAVITY  # Aplicar gravedad\n",
        "        self.x += self.x_vel\n",
        "        self.y += self.y_vel\n",
        "        self.x_vel *= FRICTION  # Aplicar fricción\n",
        "        self.y_vel *= FRICTION  # Aplicar fricción\n",
        "\n",
        "        # Colisiones con los bordes (pantalla)\n",
        "        if self.x - self.radius < 0 or self.x + self.radius > WIDTH:\n",
        "            self.x_vel = -self.x_vel  # Rebotar en el eje X\n",
        "        if self.y - self.radius < 0 or self.y + self.radius > HEIGHT:\n",
        "            self.y_vel = -self.y_vel  # Rebotar en el eje Y\n",
        "\n",
        "    def draw(self, screen):\n",
        "        \"\"\"Dibujar la pelota en la pantalla.\"\"\"\n",
        "        pygame.draw.circle(screen, self.color, (int(self.x), int(self.y)), self.radius)\n",
        "\n",
        "# Crear varias pelotas\n",
        "balls = [\n",
        "    Ball(np.random.randint(50, WIDTH-50), np.random.randint(50, HEIGHT-50), (np.random.randint(255), np.random.randint(255), np.random.randint(255)))\n",
        "    for _ in range(5)\n",
        "]\n",
        "\n",
        "def game_loop():\n",
        "    \"\"\"Lógica principal del juego que maneja las pelotas y su interacción.\"\"\"\n",
        "    screen.fill((255, 255, 255))  # Fondo blanco\n",
        "\n",
        "    # Mover y dibujar las pelotas\n",
        "    for ball in balls:\n",
        "        ball.move()\n",
        "        ball.draw(screen)\n",
        "\n",
        "    pygame.display.flip()\n",
        "\n",
        "def capture_screen():\n",
        "    \"\"\"Capturar la pantalla de Pygame como una imagen y convertirla en un formato adecuado para Streamlit.\"\"\"\n",
        "    # Capturar la pantalla de Pygame\n",
        "    pygame.image.save(screen, \"pozo_pelotas.png\")\n",
        "\n",
        "    # Abrir la imagen capturada con PIL y convertirla a un formato compatible con Streamlit\n",
        "    img = Image.open(\"pozo_pelotas.png\")\n",
        "    return img\n",
        "\n",
        "# Interfaz de Streamlit\n",
        "def main():\n",
        "    st.title(\"Pozo de Pelotas con Física de Colisión y Gravedad\")\n",
        "    st.write(\"Arrastra las pelotas con el cursor y observa cómo interactúan entre ellas y con las paredes.\")\n",
        "\n",
        "    # Mostrar instrucciones\n",
        "    st.markdown(\"\"\"\n",
        "    **Instrucciones:**\n",
        "    - Las pelotas caen debido a la gravedad.\n",
        "    - Las pelotas rebotan entre sí y contra las paredes.\n",
        "    - Arrastra las pelotas con el mouse para moverlas.\n",
        "    \"\"\")\n",
        "\n",
        "    # Crear el control para iniciar/pausar la animación\n",
        "    if 'is_running' not in st.session_state:\n",
        "        st.session_state.is_running = False\n",
        "\n",
        "    start_button = st.button('Iniciar/Pausar animación')\n",
        "\n",
        "    if start_button:\n",
        "        st.session_state.is_running = not st.session_state.is_running\n",
        "\n",
        "    # Usamos st.empty() para crear un contenedor que se va a actualizar continuamente\n",
        "    frame_placeholder = st.empty()\n",
        "\n",
        "    # Si la animación está en ejecución, continuar generando fotogramas\n",
        "    if st.session_state.is_running:\n",
        "        for event in pygame.event.get():\n",
        "            if event.type == pygame.QUIT:\n",
        "                pygame.quit()\n",
        "                st.stop()\n",
        "\n",
        "        # Lógica del juego\n",
        "        game_loop()\n",
        "\n",
        "        # Capturar la pantalla y mostrarla en Streamlit\n",
        "        img = capture_screen()\n",
        "\n",
        "        # Actualizar el fotograma dentro del contenedor (sin crear nuevas celdas)\n",
        "        frame_placeholder.image(img, caption=\"Pozo de Pelotas\", use_column_width=True)\n",
        "\n",
        "        # Control de FPS\n",
        "        pygame.time.Clock().tick(FPS)\n",
        "    else:\n",
        "        st.write(\"La animación está pausada. Haz clic en 'Iniciar' para continuar.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    }
  ]
}