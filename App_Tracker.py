# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z6biFtMh7JAJOotqtg-FqjrxJFcMGKbO
"""

import streamlit as st
import pandas as pd

# Configuración de la app
st.title("Gestión de Pedidos")
st.sidebar.header("Opciones de filtrado")

# Función para cargar el archivo CSV
@st.cache
def cargar_datos(file):
    try:
        data = pd.read_csv(file)
        return data
    except Exception as e:
        st.error(f"Error al cargar el archivo: {e}")
        return None

# Cargar archivo CSV
archivo = st.sidebar.file_uploader("Cargar archivo CSV", type=["csv"])
if archivo:
    datos = cargar_datos(archivo)

    if datos is not None:
        st.subheader("Vista previa de los datos cargados")
        st.dataframe(datos.head())

        # Filtrar pedidos según el estado
        estados = datos["Estado"].unique()
        estado_seleccionado = st.sidebar.selectbox("Selecciona el estado", estados)

        if st.sidebar.button("Filtrar por estado"):
            filtrados = datos[datos["Estado"] == estado_seleccionado]
            st.subheader(f"Pedidos con estado: {estado_seleccionado}")
            st.dataframe(filtrados)

        # Calcular tiempo promedio de entrega
        st.subheader("Tiempos promedio de entrega por producto")
        if "Fecha_Entrega" in datos.columns and "Fecha_Pedido" in datos.columns:
            # Convertir a tipo datetime
            datos["Fecha_Pedido"] = pd.to_datetime(datos["Fecha_Pedido"])
            datos["Fecha_Entrega"] = pd.to_datetime(datos["Fecha_Entrega"])

            # Ignorar filas con NaNs en Fecha_Entrega
            datos_validos = datos.dropna(subset=["Fecha_Entrega"])
            datos_validos["Tiempo_Entrega"] = (datos_validos["Fecha_Entrega"] - datos_validos["Fecha_Pedido"]).dt.days

            tiempos_promedio = datos_validos.groupby("Producto")["Tiempo_Entrega"].mean().reset_index()
            tiempos_promedio.columns = ["Producto", "Tiempo Promedio de Entrega (días)"]
            st.dataframe(tiempos_promedio)
        else:
            st.warning("El archivo no contiene las columnas necesarias para calcular tiempos de entrega.")

        # Generar informe descargable
        st.subheader("Descargar informe")
        informe = st.sidebar.radio("Selecciona el tipo de informe", ["Todos los pedidos", "Pedidos filtrados"])
        if informe == "Todos los pedidos":
            datos_para_descargar = datos
        elif informe == "Pedidos filtrados" and 'filtrados' in locals():
            datos_para_descargar = filtrados
        else:
            datos_para_descargar = pd.DataFrame()  # Si no hay pedidos filtrados

        if not datos_para_descargar.empty:
            csv = datos_para_descargar.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="Descargar informe CSV",
                data=csv,
                file_name="informe_pedidos.csv",
                mime="text/csv"
            )
        else:
            st.info("No hay datos para generar un informe.")
else:
    st.info("Por favor, carga un archivo CSV para comenzar.")